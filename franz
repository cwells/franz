#!/bin/env python3

from __future__ import absolute_import, print_function

import time
import operator as op
import click
import types
from functools import partial
from decorator import decorate
from greenlet import greenlet
from pprint import pprint
from copy import copy

from lark import Lark, Tree, InlineTransformer
from lark.lexer import Token
from lark.common import UnexpectedToken

from lib.debug import trace, profile, debug
from lib.repl import repl


GRAMMAR = 'grammars/franz.g'
EXTENSION = '.f'

typedecl = {
    'int':   int,
    'float': float,
    'str':   str,
    'list':  list,
    'dict':  dict,
    'bool':  bool,
    'any':   lambda v: v
}


class ReturnException(Exception):
    def __init__(self, value):
        self.value = value

class SyntaxException(Exception):
    def __init__(self, value):
        self.value = value

class InvalidArgument(Exception): pass
class InvalidToken(Exception): pass

class Atomize(InlineTransformer):
    integer = int
    decimal = float
    string  = lambda _, v: str(v[1:-1] if v[0] == v[-1] == '"' else v)
    true    = lambda _: True
    false   = lambda _: False

    def signature(self, *args):
        sig = []
        iargs = iter(args)
        for param in iargs:
            paramtype = next(iargs)
            if isinstance(param, Tree): param = param.children[0].value
            elif isinstance(param, Token): param = param.value
            sig.append((param, typedecl.get(paramtype, None)))
        return sig

    def chain(self, *args):
        ''' converts form a(args) -> b -> c into form c(b(a(args)))
        '''
        first, args, *rest = args
        retval = (Tree('call', [ first, args ]))
        for token in rest:
            retval =  Tree('call', [ token, Tree('args', [ retval ]) ])
        return retval

try:
    parser = Lark(
        open(GRAMMAR).read(),
        start       = 'program',
        parser      = 'lalr',
        transformer = Atomize()
    )
except:
    print("=> Grammar error")
    raise


class Function(object):
    def __init__(self, name, signature, code, context, yield_to):
        self.name = name
        self.signature = signature
        self.code = code
        self.context = {}
        self.context.update(context)
        self.yield_to = yield_to

    def prepare(self):
        # because Interpreter isn't defined til later
        self.interpreter = Interpreter(context=self.context)
        self.interpreter.yield_expr = self.yield_expr # monkey-patch interpreter

    @profile
    @trace
    @debug
    def __call__(self, *args, **kwargs):
        self.context.update(kwargs)
        return self.interpreter.eval(self.code) if isinstance(self.code, Tree) else self.code.value

    @profile
    @trace
    @debug
    def yield_expr(self, ast):
        item = self.interpreter.eval(ast)
        self.yield_to.switch(item) # jump to call method
        return item


class Interpreter(object):
    def __init__(self, context=None):
        self.context = context if context else {}

    #
    # eval
    #
    @profile
    @trace
    @debug
    def eval(self, ast):
        if isinstance(ast, list):
            retval = [ self.eval(b) for b in ast ]
            return retval[-1]

        if not hasattr(ast, 'data'):
            return ast

        if hasattr(self, ast.data):
            return getattr(self, ast.data)(ast.children)

        raise InvalidToken

    #
    # builtin functions
    #
    def fn_print(self, *args, **kwargs):
        strings = []
        for arg in args:
            msg = str(arg).format(**self.context).replace('\\n', '\n')
            strings.append(msg)
        print(*strings, end='')
        return ' '.join(strings)

    def fn_list(self, obj):
        return list(obj)

    def fn_type(self, obj):
        return type(obj)

    #
    # token actions (alphabetical)
    #
    @profile
    @trace
    @debug
    def add(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a + b

    @profile
    @trace
    @debug
    def args(self, ast):
        pargs = []
        nargs = {}
        for arg in ast:
            if isinstance(arg, Tree) and arg.data == 'assoc':
                nargs.update(self.eval(arg))
            else:
                pargs.append(self.eval(arg) if isinstance(arg, Tree) else arg)

        return pargs, nargs

    @profile
    @trace
    @debug
    def array(self, ast):
        retval = []
        for branch in ast:
            if isinstance(branch, Tree): branch = self.eval(branch)
            for b in branch:
                if isinstance(b, types.GeneratorType):
                    retval.extend(list(b))
                else:
                    retval.append(b)
        return retval

    @profile
    @trace
    @debug
    def arrayitem(self, ast):
        return [ self.eval(b) if isinstance(b, Tree) else b for b in ast ]

    @profile
    @trace
    @debug
    def assertion(self, ast):
        condition = self.eval(ast[0])
        assert condition
        return condition

    @profile
    @trace
    @debug
    def assign(self, ast):
        var, val = ast
        self.context[var.value] = self.eval(val)
        return self.context[var.value]

    @profile
    @trace
    @debug
    def assign_many(self, ast):
        i = iter(ast)
        names = []
        values = []
        for j in i:
            if isinstance(j, Token):  # lvalue
                names.append(j.value)
            elif isinstance(j, Tree): # rvalue
                values.append(self.eval(j))
            else:
                values.append(j)      # rvalue
        for i, n in enumerate(names):
            self.context[n] = values[i]
        return values

    @profile
    @trace
    @debug
    def name_list(self, ast):
        retval = []
        for b in ast:
            if isinstance(b, Tree): b = self.eval(b)
            retval.append(b.value)
        return retval

    @profile
    @trace
    @debug
    def rval_list(self, ast):
        vals = []
        for b in ast:
            if isinstance(b, Tree):
                try:
                    b = self.eval(b)
                except KeyError:
                    continue
            vals.append(b)
        return vals

    @profile
    @trace
    @debug
    def assign_many_if(self, ast):
        names, values = ast
        if isinstance(names, Tree): names = self.eval(names)
        if isinstance(values, Tree):
            values = self.eval(values)
        elif isinstance(values, Token):
            values = self.context[values.value]
        values = copy(values) # don't alter arguments
        for name in names:
            try:
                v = values.pop(0)
            except IndexError:
                v = None
            self.context[name] = v
        return values

    @profile
    @trace
    @debug
    def assign_add(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] += val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_div(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] /= val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_floor(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] //= val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_if(self, ast):
        var, val = ast
        try:
            if isinstance(val, Tree): val = self.eval(val)
        except KeyError:
            val = None
        if val:
            self.context[var] = val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_mod(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] %= val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_mul(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] *= val
        return self.context[var]

    @profile
    @trace
    @debug
    def assign_sub(self, ast):
        var, val = ast
        if isinstance(val, Tree): val = self.eval(val)
        self.context[var] -= val
        return self.context[var]

    @profile
    @trace
    @debug
    def assoc(self, ast):
        retval = {}
        branch = iter(ast)
        for key in branch:
            val = next(branch)
            if isinstance(val, Tree): val = self.eval(val)
            retval[key.value if hasattr(key, 'value') else key] = val
        return retval

    @profile
    @trace
    @debug
    def block(self, ast):
        retval = None
        for branch in ast:
            retval = self.eval(branch)
        return retval

    @profile
    @trace
    @debug
    def call(self, ast):
        def validate(signature, pargs, nargs):
            sig = copy(signature)
            retval = {}

            for value in pargs:
                try:
                    name, valid = sig.pop(0)
                except (IndexError, KeyError):
                    raise InvalidArgument
                retval[name] = valid(value)

            sig = dict(sig)
            for name, value in nargs.items():
                try:
                    valid = sig[name]
                except KeyError:
                    raise InvalidArgument
                retval[name] = valid(value)

            return retval

        name, args = str(ast[0]), ast[1:]
        pargs = [] # positional args
        nargs = {} # named args
        aargs = [ self.eval(a) if isinstance(a, Tree) else a for a in args ]
        try:
            pargs, nargs = aargs[0]
        except IndexError:
            pass

        @profile
        @trace
        @debug
        def switch_handler(item):
            while not fn_greenlet.dead:
                yield item
                item = fn_greenlet.switch()

        @profile
        @trace
        @debug
        def catch_return(fn, **kwargs):
            try:
                return fn(*args, **kwargs)
            except ReturnException as e:
                return e.value

        if name in self.context: # user-defined function
            defn = self.context[name]
            yield_to = greenlet(switch_handler)
            fn = Function(name, defn.signature, defn.code, self.context, yield_to)
            fn.prepare()
            args = validate(fn.signature, pargs=pargs, nargs=nargs)
            fn_greenlet = greenlet(partial(catch_return, fn, **args))
            return fn_greenlet.switch()

        else: # builtin function
            fn = getattr(self, 'fn_' + name)
            return fn(*pargs, **nargs)


    @profile
    @trace
    @debug
    def cmp_eq(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a == b

    @profile
    @trace
    @debug
    def cmp_gt(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a > b

    @profile
    @trace
    @debug
    def cmp_gteq(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a >= b

    @profile
    @trace
    @debug
    def cmp_and(self, ast):
        ast = copy(ast)
        branch = ast.pop(0)
        retval = self.eval(branch) if isinstance(branch, Tree) else branch
        while ast:
            logop, val = ast.pop(0), ast.pop(0)
            if not retval: return False # short-circuit
            val = self.eval(val) if isinstance(val, Tree) else val
            retval = retval and val
        return retval

    @profile
    @trace
    @debug
    def cmp_or(self, ast):
        ast = copy(ast)
        branch = ast.pop(0)
        retval = self.eval(branch) if isinstance(branch, Tree) else branch
        while ast:
            logop, val = ast.pop(0), ast.pop(0)
            if retval: return True # short-circuit
            val = self.eval(val) if isinstance(val, Tree) else val
            retval = retval or val
        return retval

    @profile
    @trace
    @debug
    def cmp_lt(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a < b

    @profile
    @trace
    @debug
    def cmp_lteq(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a <= b

    @profile
    @trace
    @debug
    def cmp_neq(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a != b

    @profile
    @trace
    @debug
    def div(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a / b

    @profile
    @trace
    @debug
    def dowhile(self, ast):
        block, condition = ast
        while True:
            retval = self.eval(block)
            if not self.eval(condition):
                break
        return retval

    @profile
    @trace
    @debug
    def expr(self, ast):
        return self.eval(ast[0])

    @profile
    @trace
    @debug
    def floor(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a // b

    @profile
    @trace
    @debug
    def forloop(self, ast):
        var, iterable, block = ast
        var = var.value
        iterable = self.eval(iterable)
        retval = None
        for self.context[var] in iterable:
            retval = self.eval(block)
        return retval

    @profile
    @trace
    @debug
    def funcdef(self, ast):
        try:
            signature, block = ast
        except ValueError:
            block = ast[0]
            signature = {}
        return Function(None, signature, block, context={}, yield_to=None)

    @profile
    @trace
    @debug
    def ifcond(self, ast):
        if self.eval(ast[0]):
            return self.eval(ast[1])
        elif len(ast) > 2:
            return self.eval(ast[2])

    @profile
    @trace
    @debug
    def include_file(self, ast):
        filename = ast[0]
        ast = parser.parse(open(filename + EXTENSION, 'r').read())
        return self.eval(ast)

    @profile
    @trace
    @debug
    def irange(self, ast):
        try:
            start, end = ast
            step = 1
        except ValueError:
            start, end, step = ast
        if isinstance(start, Tree): start = self.eval(start)
        if isinstance(end, Tree): end = self.eval(end)
        if isinstance(step, Tree): step = self.eval(step)
        return list(range(start, end + step // abs(step), step))

    @profile
    @trace
    @debug
    def mod(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a % b

    @profile
    @trace
    @debug
    def mul(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a * b

    @profile
    @trace
    @debug
    def name(self, ast):
        try:
            return self.context[ast[0].value]
        except KeyError:
            raise NameError("Name `%s` is not defined" % ast[0])

    @profile
    @trace
    @debug
    def nil(self, ast):
        return None

    @profile
    @trace
    @debug
    def pow(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a ** b

    @profile
    @trace
    @debug
    def program(self, ast):
        retval = None
        for branch in ast:
            retval = self.eval(branch)
        return retval

    @profile
    @trace
    @debug
    def return_expr(self, ast):
        retval = ast[0] if ast else None
        if isinstance(retval, Tree): retval = self.eval(retval)
        raise ReturnException(retval)

    @profile
    @trace
    @debug
    def slice(self, ast):
        var = ast[0]
        if len(ast) == 4: # i:j
            start, _, end = ast[1:]
        elif len(ast) == 2: # :
            start = 0
            end = None
        elif getattr(ast[1], 'data', None) == 'colon': # :j
            start = None
            end = ast[2]
        else: # i:
            start = ast[1]
            end = None
        if isinstance(var, Tree): var = self.eval(var)
        if isinstance(start, Tree): start = self.eval(start)
        if isinstance(end, Tree): end = self.eval(end)
        return var[start:end]

    @profile
    @trace
    @debug
    def sub(self, ast):
        a, b = ast
        if isinstance(a, Tree): a = self.eval(a)
        if isinstance(b, Tree): b = self.eval(b)
        return a - b

    @profile
    @trace
    @debug
    def subscript(self, ast):
        var, index = ast
        if isinstance(var, Tree): var = self.eval(var)
        if isinstance(index, Tree): index = self.eval(index)
        return var[index]

    @profile
    @trace
    @debug
    def tryrescue(self, ast):
        try:
            retval = self.eval(ast[0])
        except:
            retval = self.eval(ast[1])
        else:
            if len(ast) == 3:
                retval = self.eval(ast[2])
        return retval

    @profile
    @trace
    @debug
    def whileloop(self, ast):
        condition, block = ast
        retval = None
        while self.eval(condition):
            retval = self.eval(block)
        return retval

    def yield_expr(self, ast):
        raise SyntaxException("Yield keyword outside of function definition.")


@click.command()
@click.argument('program', type=click.Path(exists=True), required=False, default=None)
@click.option('--grammar', '-g', type=click.Path(exists=True), default='grammars/franz.g')
@click.option('--dump-tree', '-d', is_flag=True)
@click.option('--trace',     '-t', is_flag=True)
def main(program, grammar, dump_tree, trace):
    interpreter = Interpreter()

    if program is not None:
        try:
            ast = parser.parse(open(program).read())
        except UnexpectedToken as e:
            print("=> Parse error")
            print(e)
            exit(1)
        try:
            interpreter.eval(ast)
        except:
            print("=> Eval error")
            raise
        finally:
            if dump_tree: print(ast.pretty())

    else:
        repl(parser, interpreter)

if __name__ == '__main__':
    main()